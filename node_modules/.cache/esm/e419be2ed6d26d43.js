let MESSAGE_HANDLE_TYPES,onFakeAuthHandler,onNewChatMesage;_d6d‍.x([["onMessageHandler",()=>onMessageHandler]]);_d6d‍.w("./on-message-handle-types",[["MESSAGE_HANDLE_TYPES",["MESSAGE_HANDLE_TYPES"],function(v){MESSAGE_HANDLE_TYPES=v}]]);_d6d‍.w("./handlers/on-fake-auth",[["onFakeAuthHandler",["onFakeAuthHandler"],function(v){onFakeAuthHandler=v}]]);_d6d‍.w("./handlers/on-new-message",[["onNewChatMesage",["onNewChatMesage"],function(v){onNewChatMesage=v}]]);



const actionHandlerConfig = {
    [MESSAGE_HANDLE_TYPES.auth]: onFakeAuthHandler,
    [MESSAGE_HANDLE_TYPES.chatMessage]: onFakeAuthHandler,
}

       function onMessageHandler(message){
    const webSocket = this;
    _d6d‍.g.console.log(message)
    
    const {type, payload} = JSON.parse(message);
    const handler =  actionHandlerConfig[type];
    if(handler) {
        console.log("handle found")
        const thisForHandler = {
            type, webSocket
        }
        handler.call(thisForHandler, payload)
    } else {
        console.log("handle error")
        const errorObject = JSON.stringify({
            type: MESSAGE_HANDLE_TYPES.error,
            payload: {
                message: `no handler ${type} is registered`
            }
        })

        webSocket.send(errorObject)
    }
}